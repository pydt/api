# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: civ-serverless-api

frameworkVersion: "1.70.0"

plugins:
  - serverless-prune-plugin
  - serverless-domain-manager
  - export-api-url
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  resourcePolicy:
    - Effect: Allow
      Principal: "*"
      Action: execute-api:Invoke
      Resource:
        - execute-api:/*
      Condition:
        NotIpAddress:
          aws:SourceIp:
            - 54.219.136.29
  iamRoleStatements:
    - Effect: Allow
      Action: "dynamodb:*"
      Resource: "arn:aws:dynamodb:*:*:table/${self:custom.resourcePrefix}*"
    - Effect: Allow
      Action: "iot:*"
      Resource: "*"
    - Effect: Allow
      Action: "kms:*"
      Resource: "*"
    - Effect: Allow
      Action: "s3:*"
      Resource: "arn:aws:s3:::${self:custom.resourcePrefix}saves*"
    - Effect: Allow
      Action: "sns:*"
      Resource: "*"
    - Effect: Allow
      Action: "ses:*"
      Resource: "*"
    - Effect: Allow
      Action: "sts:*"
      Resource: "*"
  environment:
    SERVERLESS_STAGE: ${self:custom.activeStage}
    RESOURCE_PREFIX: ${self:custom.resourcePrefix}
    WEB_URL: ${env:WEB_URL, self:custom.DEV_WEB_URL}
    JWT_SECRET: ${env:JWT_SECRET, file(./config.yml):JWT_SECRET}
    ROLLBAR_API_KEY: ${env:ROLLBAR_API_KEY, file(./config.yml):ROLLBAR_API_KEY}
    DISCOURSE_API_KEY: ${env:DISCOURSE_API_KEY, file(./config.yml):DISCOURSE_API_KEY}
    STEAM_API_KEY: ${env:STEAM_API_KEY, file(./config.yml):STEAM_API_KEY}

custom:
  activeStage: ${opt:stage, self:provider.stage}
  resourcePrefix: ${self:custom.activeStage}-civx-
  DEV_WEB_URL: "http://localhost:8080"
  dev_DYNAMO_CAPACITY: 1
  prod_DYNAMO_CAPACITY: 5
  DEFAULT_DYNAMO_CAPACITY: ${self:custom.${self:custom.activeStage}_DYNAMO_CAPACITY}
  DEFAULT_LAMBDA_MEMORY: 1024
  webpack:
    #packExternalModulesMaxBuffer: 512000
    includeModules:
      forceInclude:
        - reflect-metadata
        - source-map-support
        - pydt-shared
      forceExclude:
        - aws-sdk
  domain:
    dev: api-dev.playyourdamnturn.com
    prod: api.playyourdamnturn.com
  wsDomain:
    dev: ws-dev.playyourdamnturn.com
    prod: ws.playyourdamnturn.com
  customDomain:
    http:
      domainName: ${self:custom.domain.${self:custom.activeStage}}
      stage: ${self:custom.activeStage}
      basePath: ''
      certificateName: "playyourdamnturn.com"
      createRoute53Record: true
      endpointType: 'regional'
      securityPolicy: tls_1_2
    websocket:
      domainName: ${self:custom.wsDomain.${self:custom.activeStage}}
      stage: ${self:custom.activeStage}
      basePath: ''
      certificateName: "playyourdamnturn.com"
      createRoute53Record: true
      endpointType: 'regional'
      securityPolicy: tls_1_2

  prune:
    automatic: true
    number: 3

functions:
  api_router:
    handler: api/router.handler
    memorySize: ${self:custom.DEFAULT_LAMBDA_MEMORY}
    timeout: 20
    events:
      - httpApi: '*'
  cronCheckTurnTimerJobs:
    handler: functions/cron/checkTurnTimerJobs.handler
    memorySize: ${self:custom.DEFAULT_LAMBDA_MEMORY}
    events:
      - schedule: rate(2 minutes)
  cronDeleteOldUnstartedGames:
    handler: functions/cron/deleteOldUnstartedGames.handler
    timeout: 30
    memorySize: ${self:custom.DEFAULT_LAMBDA_MEMORY}
    events:
      - schedule: cron(0 8 * * ? *)
  cronCheckForCompletedGames:
    handler: functions/cron/checkForCompletedGames.handler
    timeout: 30
    memorySize: ${self:custom.DEFAULT_LAMBDA_MEMORY}
    events:
      - schedule: cron(0 7 * * ? *)
  cronUpdateUserInfo:
    handler: functions/cron/updateUserInfo.handler
    timeout: 30
    memorySize: ${self:custom.DEFAULT_LAMBDA_MEMORY}
    events:
      - schedule: cron(23 */6 * * ? *)
  snsAddTurnTimer:
    handler: functions/sns/addTurnTimerJob.handler
    memorySize: ${self:custom.DEFAULT_LAMBDA_MEMORY}
    events:
      - sns: ${self:custom.resourcePrefix}turn-submitted
      - sns: ${self:custom.resourcePrefix}game-updated
  snsUserTurnNotification:
    handler: functions/sns/userTurnNotification.handler
    memorySize: ${self:custom.DEFAULT_LAMBDA_MEMORY}
    timeout: 10
    events:
      - sns: ${self:custom.resourcePrefix}user-game-cache-updated
  snsUpdateUserGameCache:
    handler: functions/sns/updateUserGameCache.handler
    memorySize: ${self:custom.DEFAULT_LAMBDA_MEMORY}
    events:
      - sns: ${self:custom.resourcePrefix}turn-submitted
      - sns: ${self:custom.resourcePrefix}game-updated
  snsDataMigrations:
    handler: functions/sns/dataMigrations.handler
    memorySize: ${self:custom.DEFAULT_LAMBDA_MEMORY}
    timeout: 900
    events:
      - sns: ${self:custom.resourcePrefix}data-migrations
  snsDeleteOldSaves:
    handler: functions/sns/deleteOldSaves.handler
    memorySize: ${self:custom.DEFAULT_LAMBDA_MEMORY}
    events:
      - sns: ${self:custom.resourcePrefix}turn-submitted  
  websockets:
    handler: api/websocket.handler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: auth

# you can add CloudFormation resource templates here
resources:
  Resources:
    GameSavesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.resourcePrefix}saves
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
              AllowedOrigins:
                - "*" # We should change this when we know what our domain is...
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: steamId
            AttributeType: S
        KeySchema:
          - AttributeName: steamId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.DEFAULT_DYNAMO_CAPACITY}
          WriteCapacityUnits: ${self:custom.DEFAULT_DYNAMO_CAPACITY}
        TableName: ${self:custom.resourcePrefix}user
    GameTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: S
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.DEFAULT_DYNAMO_CAPACITY}
          WriteCapacityUnits: ${self:custom.DEFAULT_DYNAMO_CAPACITY}
        TableName: ${self:custom.resourcePrefix}game
    GameTurnTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: S
          - AttributeName: turn
            AttributeType: N
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
          - AttributeName: turn
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.DEFAULT_DYNAMO_CAPACITY}
          WriteCapacityUnits: ${self:custom.DEFAULT_DYNAMO_CAPACITY}
        TableName: ${self:custom.resourcePrefix}game-turn
    ScheduledJobTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: jobType
            AttributeType: S
          - AttributeName: scheduledTime
            AttributeType: N
        KeySchema:
          - AttributeName: jobType
            KeyType: HASH
          - AttributeName: scheduledTime
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.resourcePrefix}scheduled-job
    PrivateUserDataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: steamId
            AttributeType: S
        KeySchema:
          - AttributeName: steamId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.resourcePrefix}private-user-data
    WebsocketConnectionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.resourcePrefix}websocket-connection
